package portal.core;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Locale;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletResponse;

public class AsyncModuleResponse implements HttpServletResponse {

	private final StringWriter _outputBuffer;

	private final PrintWriter _printWriter;

	private final Collection<Cookie> _cookies;

	AsyncModuleResponse() {
		_outputBuffer = new StringWriter();
		_printWriter = new PrintWriter(_outputBuffer);
		_cookies = new HashSet<Cookie>();
	}

	@Override
	public void addCookie(Cookie cookie) {
		_cookies.add(cookie);
	}

	/**
	 * This method sets the cookies generated by async modules to the response
	 * object
	 * 
	 * @param response
	 */
	public void setCookies(HttpServletResponse response) {
		Iterator<Cookie> cookieIterator = _cookies.iterator();
		while (cookieIterator.hasNext()) {
			Cookie someCookie = cookieIterator.next();
			response.addCookie(someCookie);
		}
	}

	@Override
	public void addDateHeader(String arg0, long arg1) {
		fail();

	}

	@Override
	public void addHeader(String arg0, String arg1) {
		fail();

	}

	@Override
	public void addIntHeader(String arg0, int arg1) {
		fail();

	}

	@Override
	public boolean containsHeader(String arg0) {
		fail();
		return false;
	}

	@Override
	public String encodeRedirectURL(String arg0) {
		fail();
		return null;
	}

	@Override
	public String encodeRedirectUrl(String arg0) {
		fail();
		return null;
	}

	@Override
	public String encodeURL(String arg0) {
		fail();
		return null;
	}

	@Override
	public String encodeUrl(String arg0) {
		fail();
		return null;
	}

	@Override
	public void sendError(int arg0) throws IOException {
		fail();

	}

	@Override
	public void sendError(int arg0, String arg1) throws IOException {
		fail();
	}

	@Override
	public void sendRedirect(String arg0) throws IOException {
		fail();
	}

	@Override
	public void setDateHeader(String arg0, long arg1) {
		fail();
	}

	@Override
	public void setHeader(String arg0, String arg1) {
		fail();

	}

	@Override
	public void setIntHeader(String arg0, int arg1) {
		fail();

	}

	@Override
	public void setStatus(int arg0) {
		fail();
	}

	@Override
	public void setStatus(int arg0, String arg1) {
		fail();
	}

	@Override
	public void flushBuffer() throws IOException {
		_printWriter.flush();
	}

	/**
	 * @return StringBuilder.size()
	 */
	@Override
	public int getBufferSize() {
		return _outputBuffer.getBuffer().length();
	}

	@Override
	public String getCharacterEncoding() {
		fail();
		return null;
	}

	@Override
	public String getContentType() {
		fail();
		return null;
	}

	@Override
	public Locale getLocale() {
		return Locale.US;
	}

	@Override
	public ServletOutputStream getOutputStream() throws IOException {
		fail();
		return null;
	}

	@Override
	public PrintWriter getWriter() throws IOException {
		return _printWriter;
	}

	public StringWriter getOutputBuffer() {
		return _outputBuffer;
	}

	@Override
	public boolean isCommitted() {
		fail();
		return false;
	}

	@Override
	public void reset() {
		fail();
	}

	@Override
	public void resetBuffer() {
		fail();
	}

	@Override
	public void setBufferSize(int bufferSize) {
		fail();
	}

	@Override
	public void setCharacterEncoding(String arg0) {
		fail();
	}

	@Override
	public void setContentLength(int arg0) {
		fail();
	}

	@Override
	public void setContentType(String arg0) {
		fail();
	}

	@Override
	public void setLocale(Locale arg0) {
		fail();
	}

	private final void fail() {
		throw new UnsupportedOperationException(
				"This method is not implemented.");
	}
}
